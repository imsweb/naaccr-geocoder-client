/*
 * Copyright (C) 2014 Information Management Services, Inc.
 */
package com.imsweb.geocoder;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

import com.imsweb.geocoder.GeocodeInput.TieBreakingStrategy;
import com.imsweb.geocoder.exception.BadRequestException;
import com.imsweb.geocoder.exception.NotAuthorizedException;

import static com.jcabi.matchers.RegexMatchers.matchesPattern;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.notNullValue;

public class GeocoderTest {

    @Test(expected = NotAuthorizedException.class)
    public void testMissingApiKey() throws IOException {
        new Geocoder.Builder().apiKey("").connect().geocode(new GeocodeInput());
    }

    @Test(expected = BadRequestException.class)
    public void testBadApiKey() throws IOException {
        new Geocoder.Builder().apiKey("BAD KEY").connect().geocode(new GeocodeInput());
    }

    @Test
    public void testBuilder() throws IOException {
        GeocodeInput input = new GeocodeInput();

        input.setStreetAddress("9355 Burton Way");
        input.setCity("Beverly Hills");
        input.setState("CA");
        input.setZip("90210");
        input.setNotStore(Boolean.FALSE);

        List<GeocodeOutput> results = new Geocoder.Builder()
                .url("https://geo.naaccr.org/Services/Geocode/WebService")
                .proxyHost(null)
                .proxyPort(null)
                .connect().geocode(input);

        assertThat(results.size(), is(1));
    }

    @Test
    public void testCallWithoutCensus() throws IOException {
        GeocodeInput input = new GeocodeInput();

        input.setStreetAddress("9355 Burton Way");
        input.setCity("Beverly Hills");
        input.setState("CA");
        input.setZip("90210");
        input.setNotStore(Boolean.FALSE);

        List<GeocodeOutput> results = new Geocoder.Builder().connect().geocode(input);
        assertThat(results.size(), is(1));
        GeocodeOutput output = results.get(0);
        assertThat(output.getCensusResults().size(), is(0));
        assertThat(output.getUrl(),             // Should contain all parameters except the API Key
                is("https://geo.naaccr.org/Services/Geocode/WebService/GeocoderWebServiceHttpNonParsedDetailed_V04_03.aspx?zip=90210&notStore=false&streetAddress=9355%20Burton%20Way&city=Beverly%20Hills&format=tsv&state=CA&version=4.03&verbose=true"));
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0726));
        assertThat(output.getLongitude(), is(-118.398));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("00"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("AddressPoint"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchType(), is("Exact"));
        assertThat(output.getFeatureMatchType(), is("Success"));
        assertThat(output.getFeatureMatchCount(), is(1));
        assertThat(output.getMatchingGeographyType(), is("BuildingCentroid"));
        assertThat(output.getRegionSize(), is(0.0));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getTimeTaken(), is(notNullValue()));

        assertThat(output.getMatchAddress().getNumber(), is("9355"));
        assertThat(output.getMatchAddress().getName(), is("BURTON"));
        assertThat(output.getMatchAddress().getSuffix(), is("WAY"));
        assertThat(output.getMatchAddress().getCity(), is("Beverly Hills"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90210"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getPoBoxType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPoBoxNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));

        assertThat(output.getParsedAddress().getNumber(), is("9355"));
        assertThat(output.getParsedAddress().getName(), is("BURTON"));
        assertThat(output.getParsedAddress().getSuffix(), is("WAY"));
        assertThat(output.getParsedAddress().getCity(), is("Beverly Hills"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90210"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getPoBoxType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPoBoxNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));

        assertThat(output.getFeatureAddress().getNumber(), is("9355"));
        assertThat(output.getFeatureAddress().getName(), is("Burton"));
        assertThat(output.getFeatureAddress().getSuffix(), is("Way"));
        assertThat(output.getFeatureAddress().getCity(), is("Beverly Hills"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90210"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPoBoxType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPoBoxNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCounty(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));

        assertThat(output.getInterpolationType(), is("ArealInterpolation"));
        assertThat(output.getInterpolationSubType(), is("ArealInterpolationGeometricCentroid"));
        assertThat(output.getFeatureMatchTypeNotes(), is(nullValue()));
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("FlipACoin"));       //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));

        assertThat(output.getfArea(), is(0.0));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfSource(), is("SOURCE_NAVTEQ_ADDRESSPOINTS_2016"));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfVintage(), is("2016"));
        assertThat(output.getfPrimaryIdField(), is("POINT_ADDRESS_ID"));
        assertThat(output.getfPrimaryIdValue(), is("51710138"));
        assertThat(output.getfSecondaryIdField(), is("OBJECTID"));
        assertThat(output.getfSecondaryIdValue(), is("7559709"));

        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));

        assertThat(output.getCensusResults().keySet().isEmpty(), is(true));
        assertThat(output.getMicroMatchStatus(), is("Match"));
    }

    @Test
    public void testCallWithCensus() throws IOException {
        GeocodeInput input = new GeocodeInput();

        input.setStreetAddress("9355 Burton Way");
        input.setCity("Beverly Hills");
        input.setState("CA");
        input.setZip("90210");
        input.setCensus(Boolean.TRUE);
        input.setCurrentCensusYearOnly(false);

        List<GeocodeOutput> results = new Geocoder.Builder().connect().geocode(input);
        assertThat(results.size(), is(1));

        GeocodeOutput output = results.get(0);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0726));
        assertThat(output.getLongitude(), is(-118.398));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("00"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("AddressPoint"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchType(), is("Exact"));
        assertThat(output.getFeatureMatchType(), is("Success"));
        assertThat(output.getFeatureMatchCount(), is(1));
        assertThat(output.getMatchingGeographyType(), is("BuildingCentroid"));
        assertThat(output.getRegionSize(), is(0.0));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getTimeTaken(), is(notNullValue()));

        assertThat(output.getMatchAddress().getNumber(), is("9355"));
        assertThat(output.getMatchAddress().getName(), is("BURTON"));
        assertThat(output.getMatchAddress().getSuffix(), is("WAY"));
        assertThat(output.getMatchAddress().getCity(), is("Beverly Hills"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90210"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));

        assertThat(output.getParsedAddress().getNumber(), is("9355"));
        assertThat(output.getParsedAddress().getName(), is("BURTON"));
        assertThat(output.getParsedAddress().getSuffix(), is("WAY"));
        assertThat(output.getParsedAddress().getCity(), is("Beverly Hills"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90210"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));

        assertThat(output.getFeatureAddress().getNumber(), is("9355"));
        assertThat(output.getFeatureAddress().getName(), is("Burton"));
        assertThat(output.getFeatureAddress().getSuffix(), is("Way"));
        assertThat(output.getFeatureAddress().getCity(), is("Beverly Hills"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90210"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCounty(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));

        assertThat(output.getInterpolationType(), is("ArealInterpolation"));
        assertThat(output.getInterpolationSubType(), is("ArealInterpolationGeometricCentroid"));
        assertThat(output.getFeatureMatchTypeNotes(), is(nullValue()));
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("FlipACoin"));       //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));

        assertThat(output.getfArea(), is(0.0));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfSource(), is("SOURCE_NAVTEQ_ADDRESSPOINTS_2016"));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfVintage(), is("2016"));
        assertThat(output.getfPrimaryIdField(), is("POINT_ADDRESS_ID"));
        assertThat(output.getfPrimaryIdValue(), is("51710138"));
        assertThat(output.getfSecondaryIdField(), is("OBJECTID"));
        assertThat(output.getfSecondaryIdValue(), is("7559709"));

        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(output.getMicroMatchStatus(), is("Match"));

        assertThat(output.getCensusResults().keySet(), containsInAnyOrder(1990, 2000, 2010));

        Census census = output.getCensusResults().get(2010);
        assertThat(census.getTract(), is("7008.01"));
        assertThat(census.getCountyFips(), is("037"));
        assertThat(census.getStateFips(), is("06"));
        assertThat(census.getBlock(), is("1023"));
        assertThat(census.getBlockGroup(), is("1"));
        assertThat(census.getCbsaFips(), is("31100"));
        assertThat(census.getCbsaMicro(), is("0"));
        assertThat(census.getMcdFips(), is("91750"));
        assertThat(census.getMetDivFips(), is("31084"));
        assertThat(census.getMsaFips(), is("4472"));
        assertThat(census.getPlaceFips(), is("44000"));

        census = output.getCensusResults().get(2000);
        assertThat(census.getTract(), is("7008.00"));
        assertThat(census.getCountyFips(), is("037"));
        assertThat(census.getStateFips(), is("06"));
        assertThat(census.getBlock(), is("4021"));
        assertThat(census.getBlockGroup(), is("4"));
        assertThat(census.getCbsaFips(), is("31100"));
        assertThat(census.getCbsaMicro(), is("0"));
        assertThat(census.getMcdFips(), is("91750"));
        assertThat(census.getMetDivFips(), is("31084"));
        assertThat(census.getMsaFips(), is("4472"));
        assertThat(census.getPlaceFips(), is("44000"));

        census = output.getCensusResults().get(1990);
        assertThat(census.getTract(), is("7008.00"));
        assertThat(census.getCountyFips(), is("037"));
        assertThat(census.getStateFips(), is("06"));
        assertThat(census.getBlock(), is(nullValue()));
        assertThat(census.getBlockGroup(), is(nullValue()));
        assertThat(census.getCbsaFips(), is(nullValue()));
        assertThat(census.getCbsaMicro(), is(nullValue()));
        assertThat(census.getMcdFips(), is(nullValue()));
        assertThat(census.getMetDivFips(), is(nullValue()));
        assertThat(census.getMsaFips(), is(nullValue()));
        assertThat(census.getPlaceFips(), is(nullValue()));
    }

    @Test
    public void testPoBoxWithCensus() throws IOException {
        GeocodeInput input = new GeocodeInput();

        input.setStreetAddress("PO Box 221");
        input.setCity("Beverly Hills");
        input.setState("CA");
        input.setZip("90210");
        input.setCensus(Boolean.TRUE);
        input.setCurrentCensusYearOnly(false);
        input.setMinScore("59");        // Contemporary with version 4.03 release, PO Box matches are scored at 60

        List<GeocodeOutput> results = new Geocoder.Builder().connect().geocode(input);
        assertThat(results.size(), is(1));

        GeocodeOutput output = results.get(0);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.096629));
        assertThat(output.getLongitude(), is(-118.412426));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("10"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("POBoxZIPCentroid"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchType(), is("Relaxed;Soundex"));
        assertThat(output.getFeatureMatchType(), is("Success"));
        assertThat(output.getFeatureMatchCount(), is(1));
        assertThat(output.getMatchingGeographyType(), is("USPSZip"));
        assertThat(output.getRegionSize(), is(0.0));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_POST_OFFICE_BOX"));
        assertThat(output.getTimeTaken(), is(notNullValue()));

        assertThat(output.getMatchAddress().getNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getName(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuffix(), is(nullValue()));
        assertThat(output.getMatchAddress().getPoBoxType(), is("PO BOX"));
        assertThat(output.getMatchAddress().getPoBoxNumber(), is("221"));
        assertThat(output.getMatchAddress().getCity(), is("Beverly Hills"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90210"));

        assertThat(output.getParsedAddress().getPoBoxType(), is("PO BOX"));
        assertThat(output.getParsedAddress().getPoBoxNumber(), is("221"));
        assertThat(output.getParsedAddress().getCity(), is("Beverly Hills"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90210"));

        assertThat(output.getFeatureAddress().getCity(), is("Beverly Hills"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90210"));

        assertThat(output.getfSource(), is("SOURCE_NAME_ZIPCODEDOWNLOAD_ZIPS2013"));

        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("5"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("POBoxZIP"));
        assertThat(output.getMicroMatchStatus(), is("Non-Match"));

        assertThat(output.getCensusResults().keySet(), containsInAnyOrder(1990, 2000, 2010));

        Census census = output.getCensusResults().get(2010);

        assertThat(census.getTract(), is("2611.01"));
        assertThat(census.getCountyFips(), is("037"));
        assertThat(census.getStateFips(), is("06"));

        assertThat(census.getBlock(), is("2004"));
        assertThat(census.getBlockGroup(), is("2"));
        assertThat(census.getCbsaFips(), is("31100"));
        assertThat(census.getCbsaMicro(), is("0"));
        assertThat(census.getMcdFips(), is("91750"));
        assertThat(census.getMetDivFips(), is("31084"));
        assertThat(census.getMsaFips(), is("4472"));
        assertThat(census.getPlaceFips(), is("44000"));
    }

    @Test
    public void testCallWithGeom() throws IOException {
        GeocodeInput input = new GeocodeInput();

        input.setStreetAddress("PO Box 221");
        input.setCity("Beverly Hills");
        input.setState("CA");
        input.setZip("90210");
        input.setGeom(Boolean.FALSE);
        input.setMinScore("59");

        List<GeocodeOutput> results = new Geocoder.Builder().connect().geocode(input);
        GeocodeOutput output = results.get(0);
        assertThat(output.getfGeometry(), is(nullValue()));

        input.setGeom(Boolean.TRUE);
        results = new Geocoder.Builder().connect().geocode(input);
        output = results.get(0);
        assertThat(output.getfGeometry(), is(notNullValue()));
    }

    @Test
    public void testCallWithMultipleResults() throws IOException {
        GeocodeInput input = new GeocodeInput();

        input.setStreetAddress("123 main street");
        input.setCity("los angeles");
        input.setState("ca");
        input.setZip("90007");
        input.setAllowTies(Boolean.FALSE);
        input.setTieBreakingStrategy(TieBreakingStrategy.REVERT_TO_HIERARCHY);
        input.setCensus(Boolean.TRUE);

        List<GeocodeOutput> results = new Geocoder.Builder().connect().geocode(input);
        assertThat(results.size(), is(1));

        input.setAllowTies(Boolean.TRUE);
        input.setMinScore("100");
        results = new Geocoder.Builder().connect().geocode(input);
        assertThat(results.size(), is(1));

        input.setMinScore("88");
        results = new Geocoder.Builder().connect().geocode(input);
        assertThat(results.size(), is(8));

        input.setMinScore("60");
        results = new Geocoder.Builder().connect().geocode(input);
        assertThat(results.size(), is(11));

        GeocodeOutput output = results.get(0);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        Census c1990 = output.getCensusResults().get(1990);
        Census c2000 = output.getCensusResults().get(2000);
        Census c2010 = output.getCensusResults().get(2010);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0524962825713));
        assertThat(output.getLongitude(), is(-118.243276120669));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(89.9408284023669));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(1462.70234987116));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("101-145"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("N"));
        assertThat(output.getFeatureAddress().getName(), is("MAIN"));
        assertThat(output.getFeatureAddress().getSuffix(), is("ST"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90012"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCounty(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(1462.70234987116));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_NAVTEQ_STREETS_2012"));
        assertThat(output.getfVintage(), is("2012"));
        assertThat(output.getfPrimaryIdField(), is("link_id"));
        assertThat(output.getfPrimaryIdValue(), is("128816424"));
        assertThat(output.getfSecondaryIdField(), is("uniqueId"));
        assertThat(output.getfSecondaryIdValue(), is("1016327"));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(c1990.getBlock(), is(nullValue()));
        assertThat(c1990.getBlockGroup(), is(nullValue()));
        assertThat(c1990.getTract(), is("2074.00"));
        assertThat(c1990.getCountyFips(), is("037"));
        assertThat(c1990.getCbsaFips(), is(nullValue()));
        assertThat(c1990.getCbsaMicro(), is(nullValue()));
        assertThat(c1990.getMcdFips(), is(nullValue()));
        assertThat(c1990.getMetDivFips(), is(nullValue()));
        assertThat(c1990.getMsaFips(), is(nullValue()));
        assertThat(c1990.getPlaceFips(), is(nullValue()));
        assertThat(c1990.getStateFips(), is("06"));
        assertThat(c2000.getBlock(), is("1005"));
        assertThat(c2000.getBlockGroup(), is("1"));
        assertThat(c2000.getTract(), is("2074.00"));
        assertThat(c2000.getCountyFips(), is("037"));
        assertThat(c2000.getCbsaFips(), is("31100"));
        assertThat(c2000.getCbsaMicro(), is("0"));
        assertThat(c2000.getMcdFips(), is("91750"));
        assertThat(c2000.getMetDivFips(), is("31084"));
        assertThat(c2000.getMsaFips(), is("4472"));
        assertThat(c2000.getPlaceFips(), is("44000"));
        assertThat(c2000.getStateFips(), is("06"));
        assertThat(c2010.getBlock(), is("1030"));
        assertThat(c2010.getBlockGroup(), is("1"));
        assertThat(c2010.getTract(), is("2074.00"));
        assertThat(c2010.getCountyFips(), is("037"));
        assertThat(c2010.getCbsaFips(), is("31100"));
        assertThat(c2010.getCbsaMicro(), is("0"));
        assertThat(c2010.getMcdFips(), is("91750"));
        assertThat(c2010.getMetDivFips(), is("31084"));
        assertThat(c2010.getMsaFips(), is("4472"));
        assertThat(c2010.getPlaceFips(), is("44000"));
        assertThat(c2010.getStateFips(), is("06"));
        assertThat(output.getMicroMatchStatus(), is("Review"));

        output = results.get(1);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        c1990 = output.getCensusResults().get(1990);
        c2000 = output.getCensusResults().get(2000);
        c2010 = output.getCensusResults().get(2010);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0513205964793));
        assertThat(output.getLongitude(), is(-118.244366353744));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(89.9408284023669));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(3789.09342876496));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("199-101"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("S"));
        assertThat(output.getFeatureAddress().getName(), is("MAIN"));
        assertThat(output.getFeatureAddress().getSuffix(), is("ST"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90012"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCounty(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(3789.09342876496));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_NAVTEQ_STREETS_2012"));
        assertThat(output.getfVintage(), is("2012"));
        assertThat(output.getfPrimaryIdField(), is("link_id"));
        assertThat(output.getfPrimaryIdValue(), is("23922707"));
        assertThat(output.getfSecondaryIdField(), is("uniqueId"));
        assertThat(output.getfSecondaryIdValue(), is("2182816"));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(c1990.getBlock(), is(nullValue()));
        assertThat(c1990.getBlockGroup(), is(nullValue()));
        assertThat(c1990.getTract(), is("2073.00"));
        assertThat(c1990.getCountyFips(), is("037"));
        assertThat(c1990.getCbsaFips(), is(nullValue()));
        assertThat(c1990.getCbsaMicro(), is(nullValue()));
        assertThat(c1990.getMcdFips(), is(nullValue()));
        assertThat(c1990.getMetDivFips(), is(nullValue()));
        assertThat(c1990.getMsaFips(), is(nullValue()));
        assertThat(c1990.getPlaceFips(), is(nullValue()));
        assertThat(c1990.getStateFips(), is("06"));
        assertThat(c2000.getBlock(), is("1010"));
        assertThat(c2000.getBlockGroup(), is("1"));
        assertThat(c2000.getTract(), is("2074.00"));
        assertThat(c2000.getCountyFips(), is("037"));
        assertThat(c2000.getCbsaFips(), is("31100"));
        assertThat(c2000.getCbsaMicro(), is("0"));
        assertThat(c2000.getMcdFips(), is("91750"));
        assertThat(c2000.getMetDivFips(), is("31084"));
        assertThat(c2000.getMsaFips(), is("4472"));
        assertThat(c2000.getPlaceFips(), is("44000"));
        assertThat(c2000.getStateFips(), is("06"));
        assertThat(c2010.getBlock(), is("1033"));
        assertThat(c2010.getBlockGroup(), is("1"));
        assertThat(c2010.getTract(), is("2074.00"));
        assertThat(c2010.getCountyFips(), is("037"));
        assertThat(c2010.getCbsaFips(), is("31100"));
        assertThat(c2010.getCbsaMicro(), is("0"));
        assertThat(c2010.getMcdFips(), is("91750"));
        assertThat(c2010.getMetDivFips(), is("31084"));
        assertThat(c2010.getMsaFips(), is("4472"));
        assertThat(c2010.getPlaceFips(), is("44000"));
        assertThat(c2010.getStateFips(), is("06"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));

        output = results.get(2);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(0));
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(44.3813890555208));
        assertThat(output.getLongitude(), is(-123.601206653876));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(81.9526627218935));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(6136.06739354366));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("299-101"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("W"));
        assertThat(output.getFeatureAddress().getName(), is("MAIN"));
        assertThat(output.getFeatureAddress().getSuffix(), is("ST"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("97324"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCounty(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(6136.06739354366));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_NAVTEQ_STREETS_2008"));
        assertThat(output.getfVintage(), is("2008"));
        assertThat(output.getfPrimaryIdField(), is("link_id"));
        assertThat(output.getfPrimaryIdValue(), is("737170916"));
        assertThat(output.getfSecondaryIdField(), is("uniqueId"));
        assertThat(output.getfSecondaryIdValue(), is("1825263"));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));

        output = results.get(3);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(0));
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(44.3819822636306));
        assertThat(output.getLongitude(), is(-123.598250584357));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(81.9526627218935));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(2768.47420667717));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("101-199"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("E"));
        assertThat(output.getFeatureAddress().getName(), is("MAIN"));
        assertThat(output.getFeatureAddress().getSuffix(), is("ST"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("97324"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCounty(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(2768.47420667717));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_NAVTEQ_STREETS_2008"));
        assertThat(output.getfVintage(), is("2008"));
        assertThat(output.getfPrimaryIdField(), is("link_id"));
        assertThat(output.getfPrimaryIdValue(), is("21195666"));
        assertThat(output.getfSecondaryIdField(), is("uniqueId"));
        assertThat(output.getfSecondaryIdValue(), is("5957"));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));

        output = results.get(4);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        c1990 = output.getCensusResults().get(1990);
        c2000 = output.getCensusResults().get(2000);
        c2010 = output.getCensusResults().get(2010);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0524982197878));
        assertThat(output.getLongitude(), is(-118.243245915375));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(89.9408284023669));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(5662.29067549086));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("101-299"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("N"));
        assertThat(output.getFeatureAddress().getName(), is("Main"));
        assertThat(output.getFeatureAddress().getSuffix(), is("St"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90012"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getCounty(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(5662.29067549086));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_CENSUS_TIGERLINES_2016"));
        assertThat(output.getfVintage(), is("2016"));
        assertThat(output.getfPrimaryIdField(), is("tlid"));
        assertThat(output.getfPrimaryIdValue(), is("141618138"));
        assertThat(output.getfSecondaryIdField(), is(nullValue()));
        assertThat(output.getfSecondaryIdValue(), is(nullValue()));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(c1990.getBlock(), is(nullValue()));
        assertThat(c1990.getBlockGroup(), is(nullValue()));
        assertThat(c1990.getTract(), is("2074.00"));
        assertThat(c1990.getCountyFips(), is("037"));
        assertThat(c1990.getCbsaFips(), is(nullValue()));
        assertThat(c1990.getCbsaMicro(), is(nullValue()));
        assertThat(c1990.getMcdFips(), is(nullValue()));
        assertThat(c1990.getMetDivFips(), is(nullValue()));
        assertThat(c1990.getMsaFips(), is(nullValue()));
        assertThat(c1990.getPlaceFips(), is(nullValue()));
        assertThat(c1990.getStateFips(), is("06"));
        assertThat(c2000.getBlock(), is("1005"));
        assertThat(c2000.getBlockGroup(), is("1"));
        assertThat(c2000.getTract(), is("2074.00"));
        assertThat(c2000.getCountyFips(), is("037"));
        assertThat(c2000.getCbsaFips(), is("31100"));
        assertThat(c2000.getCbsaMicro(), is("0"));
        assertThat(c2000.getMcdFips(), is("91750"));
        assertThat(c2000.getMetDivFips(), is("31084"));
        assertThat(c2000.getMsaFips(), is("4472"));
        assertThat(c2000.getPlaceFips(), is("44000"));
        assertThat(c2000.getStateFips(), is("06"));
        assertThat(c2010.getBlock(), is("1030"));
        assertThat(c2010.getBlockGroup(), is("1"));
        assertThat(c2010.getTract(), is("2074.00"));
        assertThat(c2010.getCountyFips(), is("037"));
        assertThat(c2010.getCbsaFips(), is("31100"));
        assertThat(c2010.getCbsaMicro(), is("0"));
        assertThat(c2010.getMcdFips(), is("91750"));
        assertThat(c2010.getMetDivFips(), is("31084"));
        assertThat(c2010.getMsaFips(), is("4472"));
        assertThat(c2010.getPlaceFips(), is("44000"));
        assertThat(c2010.getStateFips(), is("06"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));

        output = results.get(5);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        c1990 = output.getCensusResults().get(1990);
        c2000 = output.getCensusResults().get(2000);
        c2010 = output.getCensusResults().get(2010);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0520118400004));
        assertThat(output.getLongitude(), is(-118.243701713254));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(89.9408284023669));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(3756.62068773806));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("101-199"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("S"));
        assertThat(output.getFeatureAddress().getName(), is("Main"));
        assertThat(output.getFeatureAddress().getSuffix(), is("St"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90012"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getCounty(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(3756.62068773806));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_CENSUS_TIGERLINES_2016"));
        assertThat(output.getfVintage(), is("2016"));
        assertThat(output.getfPrimaryIdField(), is("tlid"));
        assertThat(output.getfPrimaryIdValue(), is("141618136"));
        assertThat(output.getfSecondaryIdField(), is(nullValue()));
        assertThat(output.getfSecondaryIdValue(), is(nullValue()));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(c1990.getBlock(), is(nullValue()));
        assertThat(c1990.getBlockGroup(), is(nullValue()));
        assertThat(c1990.getTract(), is("2074.00"));
        assertThat(c1990.getCountyFips(), is("037"));
        assertThat(c1990.getCbsaFips(), is(nullValue()));
        assertThat(c1990.getCbsaMicro(), is(nullValue()));
        assertThat(c1990.getMcdFips(), is(nullValue()));
        assertThat(c1990.getMetDivFips(), is(nullValue()));
        assertThat(c1990.getMsaFips(), is(nullValue()));
        assertThat(c1990.getPlaceFips(), is(nullValue()));
        assertThat(c1990.getStateFips(), is("06"));
        assertThat(c2000.getBlock(), is("1010"));
        assertThat(c2000.getBlockGroup(), is("1"));
        assertThat(c2000.getTract(), is("2074.00"));
        assertThat(c2000.getCountyFips(), is("037"));
        assertThat(c2000.getCbsaFips(), is("31100"));
        assertThat(c2000.getCbsaMicro(), is("0"));
        assertThat(c2000.getMcdFips(), is("91750"));
        assertThat(c2000.getMetDivFips(), is("31084"));
        assertThat(c2000.getMsaFips(), is("4472"));
        assertThat(c2000.getPlaceFips(), is("44000"));
        assertThat(c2000.getStateFips(), is("06"));
        assertThat(c2010.getBlock(), is("1033"));
        assertThat(c2010.getBlockGroup(), is("1"));
        assertThat(c2010.getTract(), is("2074.00"));
        assertThat(c2010.getCountyFips(), is("037"));
        assertThat(c2010.getCbsaFips(), is("31100"));
        assertThat(c2010.getCbsaMicro(), is("0"));
        assertThat(c2010.getMcdFips(), is("91750"));
        assertThat(c2010.getMetDivFips(), is("31084"));
        assertThat(c2010.getMsaFips(), is("4472"));
        assertThat(c2010.getPlaceFips(), is("44000"));
        assertThat(c2010.getStateFips(), is("06"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));

        output = results.get(6);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        c1990 = output.getCensusResults().get(1990);
        c2000 = output.getCensusResults().get(2000);
        c2010 = output.getCensusResults().get(2010);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0524982197878));
        assertThat(output.getLongitude(), is(-118.243245915375));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(89.9408284023669));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(5662.29067549086));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("101-299"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("N"));
        assertThat(output.getFeatureAddress().getName(), is("Main"));
        assertThat(output.getFeatureAddress().getSuffix(), is("St"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90012"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getCounty(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(5662.29067549086));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_CENSUS_TIGERLINES_2015"));
        assertThat(output.getfVintage(), is("2015"));
        assertThat(output.getfPrimaryIdField(), is("tlid"));
        assertThat(output.getfPrimaryIdValue(), is("141618138"));
        assertThat(output.getfSecondaryIdField(), is(nullValue()));
        assertThat(output.getfSecondaryIdValue(), is(nullValue()));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(c1990.getBlock(), is(nullValue()));
        assertThat(c1990.getBlockGroup(), is(nullValue()));
        assertThat(c1990.getTract(), is("2074.00"));
        assertThat(c1990.getCountyFips(), is("037"));
        assertThat(c1990.getCbsaFips(), is(nullValue()));
        assertThat(c1990.getCbsaMicro(), is(nullValue()));
        assertThat(c1990.getMcdFips(), is(nullValue()));
        assertThat(c1990.getMetDivFips(), is(nullValue()));
        assertThat(c1990.getMsaFips(), is(nullValue()));
        assertThat(c1990.getPlaceFips(), is(nullValue()));
        assertThat(c1990.getStateFips(), is("06"));
        assertThat(c2000.getBlock(), is("1005"));
        assertThat(c2000.getBlockGroup(), is("1"));
        assertThat(c2000.getTract(), is("2074.00"));
        assertThat(c2000.getCountyFips(), is("037"));
        assertThat(c2000.getCbsaFips(), is("31100"));
        assertThat(c2000.getCbsaMicro(), is("0"));
        assertThat(c2000.getMcdFips(), is("91750"));
        assertThat(c2000.getMetDivFips(), is("31084"));
        assertThat(c2000.getMsaFips(), is("4472"));
        assertThat(c2000.getPlaceFips(), is("44000"));
        assertThat(c2000.getStateFips(), is("06"));
        assertThat(c2010.getBlock(), is("1030"));
        assertThat(c2010.getBlockGroup(), is("1"));
        assertThat(c2010.getTract(), is("2074.00"));
        assertThat(c2010.getCountyFips(), is("037"));
        assertThat(c2010.getCbsaFips(), is("31100"));
        assertThat(c2010.getCbsaMicro(), is("0"));
        assertThat(c2010.getMcdFips(), is("91750"));
        assertThat(c2010.getMetDivFips(), is("31084"));
        assertThat(c2010.getMsaFips(), is("4472"));
        assertThat(c2010.getPlaceFips(), is("44000"));
        assertThat(c2010.getStateFips(), is("06"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));

        output = results.get(7);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        c1990 = output.getCensusResults().get(1990);
        c2000 = output.getCensusResults().get(2000);
        c2010 = output.getCensusResults().get(2010);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0520118400004));
        assertThat(output.getLongitude(), is(-118.243701713254));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(89.9408284023669));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(3756.62068773806));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("101-199"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("S"));
        assertThat(output.getFeatureAddress().getName(), is("Main"));
        assertThat(output.getFeatureAddress().getSuffix(), is("St"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90012"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getCounty(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(3756.62068773806));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_CENSUS_TIGERLINES_2015"));
        assertThat(output.getfVintage(), is("2015"));
        assertThat(output.getfPrimaryIdField(), is("tlid"));
        assertThat(output.getfPrimaryIdValue(), is("141618136"));
        assertThat(output.getfSecondaryIdField(), is(nullValue()));
        assertThat(output.getfSecondaryIdValue(), is(nullValue()));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(c1990.getBlock(), is(nullValue()));
        assertThat(c1990.getBlockGroup(), is(nullValue()));
        assertThat(c1990.getTract(), is("2074.00"));
        assertThat(c1990.getCountyFips(), is("037"));
        assertThat(c1990.getCbsaFips(), is(nullValue()));
        assertThat(c1990.getCbsaMicro(), is(nullValue()));
        assertThat(c1990.getMcdFips(), is(nullValue()));
        assertThat(c1990.getMetDivFips(), is(nullValue()));
        assertThat(c1990.getMsaFips(), is(nullValue()));
        assertThat(c1990.getPlaceFips(), is(nullValue()));
        assertThat(c1990.getStateFips(), is("06"));
        assertThat(c2000.getBlock(), is("1010"));
        assertThat(c2000.getBlockGroup(), is("1"));
        assertThat(c2000.getTract(), is("2074.00"));
        assertThat(c2000.getCountyFips(), is("037"));
        assertThat(c2000.getCbsaFips(), is("31100"));
        assertThat(c2000.getCbsaMicro(), is("0"));
        assertThat(c2000.getMcdFips(), is("91750"));
        assertThat(c2000.getMetDivFips(), is("31084"));
        assertThat(c2000.getMsaFips(), is("4472"));
        assertThat(c2000.getPlaceFips(), is("44000"));
        assertThat(c2000.getStateFips(), is("06"));
        assertThat(c2010.getBlock(), is("1033"));
        assertThat(c2010.getBlockGroup(), is("1"));
        assertThat(c2010.getTract(), is("2074.00"));
        assertThat(c2010.getCountyFips(), is("037"));
        assertThat(c2010.getCbsaFips(), is("31100"));
        assertThat(c2010.getCbsaMicro(), is("0"));
        assertThat(c2010.getMcdFips(), is("91750"));
        assertThat(c2010.getMetDivFips(), is("31084"));
        assertThat(c2010.getMsaFips(), is("4472"));
        assertThat(c2010.getPlaceFips(), is("44000"));
        assertThat(c2010.getStateFips(), is("06"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));

        output = results.get(8);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        c1990 = output.getCensusResults().get(1990);
        c2000 = output.getCensusResults().get(2000);
        c2010 = output.getCensusResults().get(2010);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0524982197878));
        assertThat(output.getLongitude(), is(-118.243245915375));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(89.9408284023669));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(5662.29067549086));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("101-299"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("N"));
        assertThat(output.getFeatureAddress().getName(), is("Main"));
        assertThat(output.getFeatureAddress().getSuffix(), is("St"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90012"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getCounty(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(5662.29067549086));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_CENSUS_TIGERLINES_2010"));
        assertThat(output.getfVintage(), is("2010"));
        assertThat(output.getfPrimaryIdField(), is("tlid"));
        assertThat(output.getfPrimaryIdValue(), is("141618138"));
        assertThat(output.getfSecondaryIdField(), is(nullValue()));
        assertThat(output.getfSecondaryIdValue(), is(nullValue()));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(c1990.getBlock(), is(nullValue()));
        assertThat(c1990.getBlockGroup(), is(nullValue()));
        assertThat(c1990.getTract(), is("2074.00"));
        assertThat(c1990.getCountyFips(), is("037"));
        assertThat(c1990.getCbsaFips(), is(nullValue()));
        assertThat(c1990.getCbsaMicro(), is(nullValue()));
        assertThat(c1990.getMcdFips(), is(nullValue()));
        assertThat(c1990.getMetDivFips(), is(nullValue()));
        assertThat(c1990.getMsaFips(), is(nullValue()));
        assertThat(c1990.getPlaceFips(), is(nullValue()));
        assertThat(c1990.getStateFips(), is("06"));
        assertThat(c2000.getBlock(), is("1005"));
        assertThat(c2000.getBlockGroup(), is("1"));
        assertThat(c2000.getTract(), is("2074.00"));
        assertThat(c2000.getCountyFips(), is("037"));
        assertThat(c2000.getCbsaFips(), is("31100"));
        assertThat(c2000.getCbsaMicro(), is("0"));
        assertThat(c2000.getMcdFips(), is("91750"));
        assertThat(c2000.getMetDivFips(), is("31084"));
        assertThat(c2000.getMsaFips(), is("4472"));
        assertThat(c2000.getPlaceFips(), is("44000"));
        assertThat(c2000.getStateFips(), is("06"));
        assertThat(c2010.getBlock(), is("1030"));
        assertThat(c2010.getBlockGroup(), is("1"));
        assertThat(c2010.getTract(), is("2074.00"));
        assertThat(c2010.getCountyFips(), is("037"));
        assertThat(c2010.getCbsaFips(), is("31100"));
        assertThat(c2010.getCbsaMicro(), is("0"));
        assertThat(c2010.getMcdFips(), is("91750"));
        assertThat(c2010.getMetDivFips(), is("31084"));
        assertThat(c2010.getMsaFips(), is("4472"));
        assertThat(c2010.getPlaceFips(), is("44000"));
        assertThat(c2010.getStateFips(), is("06"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));

        output = results.get(9);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        c1990 = output.getCensusResults().get(1990);
        c2000 = output.getCensusResults().get(2000);
        c2010 = output.getCensusResults().get(2010);
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.0520118400004));
        assertThat(output.getLongitude(), is(-118.243701713254));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("03"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("StreetSegmentInterpolation"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(89.9408284023669));
        assertThat(output.getMatchType(), is("Relaxed"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchCount(), is(2));
        assertThat(output.getMatchingGeographyType(), is("StreetSegment"));
        assertThat(output.getRegionSize(), is(3756.62068773806));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("LinearInterpolation"));
        assertThat(output.getInterpolationSubType(), is("LinearInterpolationAddressRange"));
        assertThat(output.getFeatureMatchType(), is("Ambiguous"));
        assertThat(output.getFeatureMatchTypeNotes(), is("Number-None;PreDirectional-InputAddressIncompleteMultiplePossibilities"));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is("101-199"));
        assertThat(output.getFeatureAddress().getPreDirectional(), is("S"));
        assertThat(output.getFeatureAddress().getName(), is("Main"));
        assertThat(output.getFeatureAddress().getSuffix(), is("St"));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90012"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCountySubregion(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getCounty(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(3756.62068773806));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_CENSUS_TIGERLINES_2010"));
        assertThat(output.getfVintage(), is("2010"));
        assertThat(output.getfPrimaryIdField(), is("tlid"));
        assertThat(output.getfPrimaryIdValue(), is("141618136"));
        assertThat(output.getfSecondaryIdField(), is(nullValue()));
        assertThat(output.getfSecondaryIdValue(), is(nullValue()));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("1"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceStreetAddress"));
        assertThat(c1990.getBlock(), is(nullValue()));
        assertThat(c1990.getBlockGroup(), is(nullValue()));
        assertThat(c1990.getTract(), is("2074.00"));
        assertThat(c1990.getCountyFips(), is("037"));
        assertThat(c1990.getCbsaFips(), is(nullValue()));
        assertThat(c1990.getCbsaMicro(), is(nullValue()));
        assertThat(c1990.getMcdFips(), is(nullValue()));
        assertThat(c1990.getMetDivFips(), is(nullValue()));
        assertThat(c1990.getMsaFips(), is(nullValue()));
        assertThat(c1990.getPlaceFips(), is(nullValue()));
        assertThat(c1990.getStateFips(), is("06"));
        assertThat(c2000.getBlock(), is("1010"));
        assertThat(c2000.getBlockGroup(), is("1"));
        assertThat(c2000.getTract(), is("2074.00"));
        assertThat(c2000.getCountyFips(), is("037"));
        assertThat(c2000.getCbsaFips(), is("31100"));
        assertThat(c2000.getCbsaMicro(), is("0"));
        assertThat(c2000.getMcdFips(), is("91750"));
        assertThat(c2000.getMetDivFips(), is("31084"));
        assertThat(c2000.getMsaFips(), is("4472"));
        assertThat(c2000.getPlaceFips(), is("44000"));
        assertThat(c2000.getStateFips(), is("06"));
        assertThat(c2010.getBlock(), is("1033"));
        assertThat(c2010.getBlockGroup(), is("1"));
        assertThat(c2010.getTract(), is("2074.00"));
        assertThat(c2010.getCountyFips(), is("037"));
        assertThat(c2010.getCbsaFips(), is("31100"));
        assertThat(c2010.getCbsaMicro(), is("0"));
        assertThat(c2010.getMcdFips(), is("91750"));
        assertThat(c2010.getMetDivFips(), is("31084"));
        assertThat(c2010.getMsaFips(), is("4472"));
        assertThat(c2010.getPlaceFips(), is("44000"));
        assertThat(c2010.getStateFips(), is("06"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));

        output = results.get(10);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        c1990 = output.getCensusResults().get(1990);
        c2000 = output.getCensusResults().get(2000);
        c2010 = output.getCensusResults().get(2010);
        assertThat(output.getCensusResults(), is(notNullValue()));
        assertThat(output.getCensusResults().size(), is(3));
        assertThat(output.getTransactionId(), is(notNullValue()));
        assertThat(output.getTransactionId(), matchesPattern("[0-9a-f\\-]+"));
        assertThat(output.getApiVersion(), is("4.3"));
        assertThat(output.getStatusCode(), is(200));
        assertThat(output.getLatitude(), is(34.026525));
        assertThat(output.getLongitude(), is(-118.282408));
        assertThat(output.getNaaccrGisCoordinateQualityCode(), is("09"));
        assertThat(output.getNaaccrGisCoordinateQualityName(), is("AddressZIPCentroid"));
        assertThat(output.getMatchScore(), is(notNullValue()));
        assertThat(output.getMatchScore(), is(60.0));
        assertThat(output.getMatchType(), is("Relaxed;Soundex"));
        assertThat(output.getFeatureMatchCount(), is(1));
        assertThat(output.getMatchingGeographyType(), is("USPSZip"));
        assertThat(output.getRegionSize(), is(0.0));
        assertThat(output.getRegionSizeUnit(), is("Meters"));
        assertThat(output.getMatchedLocationType(), is("LOCATION_TYPE_STREET_ADDRESS"));
        assertThat(output.getInterpolationType(), is("ArealInterpolation"));
        assertThat(output.getInterpolationSubType(), is("ArealInterpolationGeometricCentroid"));
        assertThat(output.getFeatureMatchType(), is("Success"));
        assertThat(output.getFeatureMatchTypeNotes(), is(nullValue()));
        assertThat(output.getFeatureMatchTypeTieBreakingNotes(), is("ReturnAll"));       //These two seem to be reversed...
        assertThat(output.getTieHandlingStrategyType(), is(nullValue()));                      //These two seem to be reversed...
        assertThat(output.getFeatureMatchingSelectionMethod(), is("FeatureClassBased"));
        assertThat(output.getFeatureMatchingSelectionMethodNotes(), is(nullValue()));
        assertThat(output.getTimeTaken(), is(notNullValue()));
        assertThat(output.getMatchAddress().getNumber(), is("123"));
        assertThat(output.getMatchAddress().getName(), is("MAIN"));
        assertThat(output.getMatchAddress().getSuffix(), is("ST"));
        assertThat(output.getMatchAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getMatchAddress().getState(), is("CA"));
        assertThat(output.getMatchAddress().getZip(), is("90007"));
        assertThat(output.getMatchAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreType(), is(nullValue()));
        assertThat(output.getMatchAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getMatchAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getMatchAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getMatchAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getMatchAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getMatchAddress().getCounty(), is(nullValue()));
        assertThat(output.getMatchAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getMatchAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getParsedAddress().getNumber(), is("123"));
        assertThat(output.getParsedAddress().getName(), is("MAIN"));
        assertThat(output.getParsedAddress().getSuffix(), is("ST"));
        assertThat(output.getParsedAddress().getCity(), is("LOS ANGELES"));
        assertThat(output.getParsedAddress().getState(), is("CA"));
        assertThat(output.getParsedAddress().getZip(), is("90007"));
        assertThat(output.getParsedAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreType(), is(nullValue()));
        assertThat(output.getParsedAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getParsedAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getParsedAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getParsedAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getParsedAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getParsedAddress().getCounty(), is(nullValue()));
        assertThat(output.getParsedAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getParsedAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getFeatureAddress().getNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getName(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuffix(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCity(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getState(), is("CA"));
        assertThat(output.getFeatureAddress().getZip(), is("90007"));
        assertThat(output.getFeatureAddress().getNumberFractional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPreArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostArticle(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostQualifier(), is(nullValue()));
        assertThat(output.getFeatureAddress().getPostDirectional(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteType(), is(nullValue()));
        assertThat(output.getFeatureAddress().getSuiteNumber(), is(nullValue()));
        assertThat(output.getFeatureAddress().getConsolidatedCity(), is(nullValue()));
        assertThat(output.getFeatureAddress().getMinorCivilDivision(), is(nullValue()));
        assertThat(output.getFeatureAddress().getCounty(), is("Los Angeles"));
        assertThat(output.getFeatureAddress().getCountySubregion(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus1(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus2(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus3(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus4(), is(nullValue()));
        assertThat(output.getFeatureAddress().getZipPlus5(), is(nullValue()));
        assertThat(output.getfArea(), is(0.0));
        assertThat(output.getfAreaType(), is("Meters"));
        assertThat(output.getfGeometry(), is(nullValue()));
        assertThat(output.getfGeometrySrid(), is("4269"));
        assertThat(output.getfSource(), is("SOURCE_NAME_ZIPCODEDOWNLOAD_ZIPS2013"));
        assertThat(output.getfVintage(), is("2013"));
        assertThat(output.getfPrimaryIdField(), is("ZIPCode"));
        assertThat(output.getfPrimaryIdValue(), is("90007"));
        assertThat(output.getfSecondaryIdField(), is(nullValue()));
        assertThat(output.getfSecondaryIdValue(), is(nullValue()));
        assertThat(output.getNaaccrCensusTractCertaintyCode(), is("4"));
        assertThat(output.getNaaccrCensusTractCertaintyName(), is("ResidenceZIP"));
        assertThat(c1990.getBlock(), is(nullValue()));
        assertThat(c1990.getBlockGroup(), is(nullValue()));
        assertThat(c1990.getTract(), is("2247.00"));
        assertThat(c1990.getCountyFips(), is("037"));
        assertThat(c1990.getCbsaFips(), is(nullValue()));
        assertThat(c1990.getCbsaMicro(), is(nullValue()));
        assertThat(c1990.getMcdFips(), is(nullValue()));
        assertThat(c1990.getMetDivFips(), is(nullValue()));
        assertThat(c1990.getMsaFips(), is(nullValue()));
        assertThat(c1990.getPlaceFips(), is(nullValue()));
        assertThat(c1990.getStateFips(), is("06"));
        assertThat(c2000.getBlock(), is("2003"));
        assertThat(c2000.getBlockGroup(), is("2"));
        assertThat(c2000.getTract(), is("2247.00"));
        assertThat(c2000.getCountyFips(), is("037"));
        assertThat(c2000.getCbsaFips(), is("31100"));
        assertThat(c2000.getCbsaMicro(), is("0"));
        assertThat(c2000.getMcdFips(), is("91750"));
        assertThat(c2000.getMetDivFips(), is("31084"));
        assertThat(c2000.getMsaFips(), is("4472"));
        assertThat(c2000.getPlaceFips(), is("44000"));
        assertThat(c2000.getStateFips(), is("06"));
        assertThat(c2010.getBlock(), is("1000"));
        assertThat(c2010.getBlockGroup(), is("1"));
        assertThat(c2010.getTract(), is("2247.00"));
        assertThat(c2010.getCountyFips(), is("037"));
        assertThat(c2010.getCbsaFips(), is("31100"));
        assertThat(c2010.getCbsaMicro(), is("0"));
        assertThat(c2010.getMcdFips(), is("91750"));
        assertThat(c2010.getMetDivFips(), is("31084"));
        assertThat(c2010.getMsaFips(), is("4472"));
        assertThat(c2010.getPlaceFips(), is("44000"));
        assertThat(c2010.getStateFips(), is("06"));
        assertThat(output.getMicroMatchStatus(), is(nullValue()));
    }

    @Test
    public void testResponseLength() throws IOException {
        GeocodeInput input = new GeocodeInput();

        input.setStreetAddress("9355 Burton Way");
        input.setCity("Beverly Hills");
        input.setState("CA");
        input.setZip("90210");
        input.setCensus(Boolean.FALSE);
        input.setAllowTies(Boolean.FALSE);

        String result = new Geocoder.Builder().connect().getCall(input).execute().body().string().trim();
        List<String> lines = Arrays.asList(result.split("\r\n"));
        Assert.assertEquals(1, lines.size());
        String[] parts = lines.get(0).split("\t");
        Assert.assertEquals(117, parts.length);

        input.setCensus(Boolean.TRUE);
        input.setCurrentCensusYearOnly(Boolean.TRUE);
        result = new Geocoder.Builder().connect().getCall(input).execute().body().string().trim();
        lines = Arrays.asList(result.split("\r\n"));
        Assert.assertEquals(1, lines.size());
        parts = lines.get(0).split("\t");
        Assert.assertEquals(150, parts.length);

        input.setCurrentCensusYearOnly(Boolean.FALSE);
        result = new Geocoder.Builder().connect().getCall(input).execute().body().string().trim();
        lines = Arrays.asList(result.split("\r\n"));
        Assert.assertEquals(1, lines.size());
        parts = lines.get(0).split("\t");
        Assert.assertEquals(150, parts.length);

        input.setCensus(Boolean.FALSE);
        input.setAllowTies(Boolean.TRUE);
        result = new Geocoder.Builder().connect().getCall(input).execute().body().string().trim();
        lines = Arrays.asList(result.split("\r\n"));
        Assert.assertEquals(3, lines.size());
        parts = lines.get(0).split("\t");
        Assert.assertEquals(117, parts.length);
        parts = lines.get(1).split("\t");
        Assert.assertEquals(116, parts.length);
        parts = lines.get(2).split("\t");
        Assert.assertEquals(116, parts.length);

        input.setCensus(Boolean.TRUE);
        input.setCurrentCensusYearOnly(Boolean.TRUE);
        result = new Geocoder.Builder().connect().getCall(input).execute().body().string().trim();
        lines = Arrays.asList(result.split("\r\n"));
        Assert.assertEquals(3, lines.size());
        parts = lines.get(0).split("\t");
        Assert.assertEquals(150, parts.length);
        parts = lines.get(1).split("\t");
        Assert.assertEquals(149, parts.length);
        parts = lines.get(2).split("\t");
        Assert.assertEquals(149, parts.length);
        input.setCensus(Boolean.TRUE);
        input.setCurrentCensusYearOnly(Boolean.TRUE);

        input.setCurrentCensusYearOnly(Boolean.FALSE);
        result = new Geocoder.Builder().connect().getCall(input).execute().body().string().trim();
        lines = Arrays.asList(result.split("\r\n"));
        Assert.assertEquals(3, lines.size());
        parts = lines.get(0).split("\t");
        Assert.assertEquals(150, parts.length);
        parts = lines.get(1).split("\t");
        Assert.assertEquals(149, parts.length);
        parts = lines.get(2).split("\t");
        Assert.assertEquals(149, parts.length);
    }

}
